const empty_TV

const empty_Tree

const vmt_Visitor
  :Visitor.visit

const vmt_MyVisitor
  :MyVisitor.visit

func Main [in 0, out 1, local 1]
   out[0] = :empty_TV
   $t0 = :TV.Start
   call $t0
   local[0] = $v0
   $t0 = local[0]
   PrintIntS($t0)
   ret

func TV.Start [in 1, out 2, local 12]
   $t0 = 24
   $t1 = HeapAllocZ($t0)
   local[0] = $t1
   $t0 = local[0]
   if $t0 goto :null1
   $t0 = "null pointer"
   Error($t0)
null1:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 16
   $t0 = :Tree.Init
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null2
   $t0 = "null pointer"
   Error($t0)
null2:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.Print
   call $t0
   local[1] = $v0
   $t0 = 100000000
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null3
   $t0 = "null pointer"
   Error($t0)
null3:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 8
   $t0 = :Tree.Insert
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null4
   $t0 = "null pointer"
   Error($t0)
null4:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 24
   $t0 = :Tree.Insert
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null5
   $t0 = "null pointer"
   Error($t0)
null5:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 4
   $t0 = :Tree.Insert
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null6
   $t0 = "null pointer"
   Error($t0)
null6:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 12
   $t0 = :Tree.Insert
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null7
   $t0 = "null pointer"
   Error($t0)
null7:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 20
   $t0 = :Tree.Insert
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null8
   $t0 = "null pointer"
   Error($t0)
null8:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 28
   $t0 = :Tree.Insert
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null9
   $t0 = "null pointer"
   Error($t0)
null9:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 14
   $t0 = :Tree.Insert
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null10
   $t0 = "null pointer"
   Error($t0)
null10:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.Print
   call $t0
   local[1] = $v0
   $t0 = 100000000
   PrintIntS($t0)
   $t0 = 12
   $t1 = HeapAllocZ($t0)
   local[2] = $t1
   $t0 = local[2]
   $t1 = :vmt_MyVisitor
   [$t0+0] = $t1
   $t0 = local[2]
   local[3] = $t0
   $t0 = 50000000
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null11
   $t0 = "null pointer"
   Error($t0)
null11:
   $v0 = local[0]
   out[0] = $v0
   $v0 = local[3]
   out[1] = $v0
   $t0 = :Tree.accept
   call $t0
   local[4] = $v0
   $t0 = 100000000
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null12
   $t0 = "null pointer"
   Error($t0)
null12:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 24
   $t0 = :Tree.Search
   call $t0
   local[5] = $v0
   $t0 = local[5]
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null13
   $t0 = "null pointer"
   Error($t0)
null13:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 12
   $t0 = :Tree.Search
   call $t0
   local[6] = $v0
   $t0 = local[6]
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null14
   $t0 = "null pointer"
   Error($t0)
null14:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 16
   $t0 = :Tree.Search
   call $t0
   local[7] = $v0
   $t0 = local[7]
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null15
   $t0 = "null pointer"
   Error($t0)
null15:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 50
   $t0 = :Tree.Search
   call $t0
   local[8] = $v0
   $t0 = local[8]
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null16
   $t0 = "null pointer"
   Error($t0)
null16:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 12
   $t0 = :Tree.Search
   call $t0
   local[9] = $v0
   $t0 = local[9]
   PrintIntS($t0)
   $t0 = local[0]
   if $t0 goto :null17
   $t0 = "null pointer"
   Error($t0)
null17:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 12
   $t0 = :Tree.Delete
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null18
   $t0 = "null pointer"
   Error($t0)
null18:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.Print
   call $t0
   local[1] = $v0
   $t0 = local[0]
   if $t0 goto :null19
   $t0 = "null pointer"
   Error($t0)
null19:
   $v0 = local[0]
   out[0] = $v0
   out[1] = 12
   $t0 = :Tree.Search
   call $t0
   local[10] = $v0
   $t0 = local[10]
   PrintIntS($t0)
   $v0 = 0
   ret

func Tree.Init [in 2, out 0, local 2]
   $t0 = in[0]
   $t1 = in[1]
   [$t0+8] = $t1
   $t0 = in[0]
   $t1 = 0
   [$t0+12] = $t1
   $t0 = in[0]
   $t1 = 0
   [$t0+16] = $t1
   $v0 = 1
   ret

func Tree.SetRight [in 2, out 0, local 2]
   $t0 = in[0]
   $t1 = in[1]
   [$t0+4] = $t1
   $v0 = 1
   ret

func Tree.SetLeft [in 2, out 0, local 2]
   $t0 = in[0]
   $t1 = in[1]
   [$t0+0] = $t1
   $v0 = 1
   ret

func Tree.GetRight [in 1, out 0, local 2]
   $t0 = in[0]
   $t1 = local[0]
   $t1 = [$t0+4]
   local[0] = $t1
   $v0 = local[0]
   ret

func Tree.GetLeft [in 1, out 0, local 2]
   $t0 = in[0]
   $t1 = local[0]
   $t1 = [$t0+0]
   local[0] = $t1
   $v0 = local[0]
   ret

func Tree.GetKey [in 1, out 0, local 2]
   $t0 = in[0]
   $t1 = local[0]
   $t1 = [$t0+8]
   local[0] = $t1
   $v0 = local[0]
   ret

func Tree.SetKey [in 2, out 0, local 2]
   $t0 = in[0]
   $t1 = in[1]
   [$t0+8] = $t1
   $v0 = 1
   ret

func Tree.GetHas_Right [in 1, out 0, local 2]
   $t0 = in[0]
   $t1 = local[0]
   $t1 = [$t0+16]
   local[0] = $t1
   $v0 = local[0]
   ret

func Tree.GetHas_Left [in 1, out 0, local 2]
   $t0 = in[0]
   $t1 = local[0]
   $t1 = [$t0+12]
   local[0] = $t1
   $v0 = local[0]
   ret

func Tree.SetHas_Left [in 2, out 0, local 2]
   $t0 = in[0]
   $t1 = in[1]
   [$t0+12] = $t1
   $v0 = 1
   ret

func Tree.SetHas_Right [in 2, out 0, local 2]
   $t0 = in[0]
   $t1 = in[1]
   [$t0+16] = $t1
   $v0 = 1
   ret

func Tree.Compare [in 3, out 0, local 7]
   $t0 = 0
   local[0] = $t0
   $t0 = in[2]
   $t1 = 1
   $t2 = Add($t0 $t1)
   local[1] = $t2
   $t0 = in[1]
   $t1 = in[2]
   $t2 = LtS($t0 $t1)
   local[2] = $t2
   $t0 = local[2]
   if0 $t0 goto :if1_else
   $t0 = 0
   local[0] = $t0
   goto :if1_end
if1_else:
   $t0 = in[1]
   $t1 = local[1]
   $t2 = LtS($t0 $t1)
   local[3] = $t2
   $t0 = local[3]
   if $t0 goto :if2_else
   $t0 = 0
   local[0] = $t0
   goto :if2_end
if2_else:
   $t0 = 1
   local[0] = $t0
if2_end:
if1_end:
   $v0 = local[0]
   ret

func Tree.Insert [in 2, out 2, local 10]
   $t0 = 24
   $t1 = HeapAllocZ($t0)
   local[0] = $t1
   $t0 = local[0]
   if $t0 goto :null20
   $t0 = "null pointer"
   Error($t0)
null20:
   $v0 = local[0]
   out[0] = $v0
   $v0 = in[1]
   out[1] = $v0
   $t0 = :Tree.Init
   call $t0
   local[1] = $v0
   $t0 = in[0]
   local[2] = $t0
   $t0 = 1
   local[3] = $t0
while1_top:
   $t0 = local[3]
   if0 $t0 goto :while1_end
   $t0 = local[2]
   if $t0 goto :null21
   $t0 = "null pointer"
   Error($t0)
null21:
   $v0 = local[2]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[4] = $v0
   $t0 = in[1]
   $t1 = local[4]
   $t2 = LtS($t0 $t1)
   local[5] = $t2
   $t0 = local[5]
   if0 $t0 goto :if3_else
   $t0 = local[2]
   if $t0 goto :null22
   $t0 = "null pointer"
   Error($t0)
null22:
   $v0 = local[2]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[6] = $v0
   $t0 = local[6]
   if0 $t0 goto :if4_else
   $t0 = local[2]
   if $t0 goto :null23
   $t0 = "null pointer"
   Error($t0)
null23:
   $v0 = local[2]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[2] = $v0
   goto :if4_end
if4_else:
   $t0 = 0
   local[3] = $t0
   $t0 = local[2]
   if $t0 goto :null24
   $t0 = "null pointer"
   Error($t0)
null24:
   $v0 = local[2]
   out[0] = $v0
   out[1] = 1
   $t0 = :Tree.SetHas_Left
   call $t0
   local[1] = $v0
   $t0 = local[2]
   if $t0 goto :null25
   $t0 = "null pointer"
   Error($t0)
null25:
   $v0 = local[2]
   out[0] = $v0
   $v0 = local[0]
   out[1] = $v0
   $t0 = :Tree.SetLeft
   call $t0
   local[1] = $v0
if4_end:
   goto :if3_end
if3_else:
   $t0 = local[2]
   if $t0 goto :null26
   $t0 = "null pointer"
   Error($t0)
null26:
   $v0 = local[2]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[7] = $v0
   $t0 = local[7]
   if0 $t0 goto :if5_else
   $t0 = local[2]
   if $t0 goto :null27
   $t0 = "null pointer"
   Error($t0)
null27:
   $v0 = local[2]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   local[2] = $v0
   goto :if5_end
if5_else:
   $t0 = 0
   local[3] = $t0
   $t0 = local[2]
   if $t0 goto :null28
   $t0 = "null pointer"
   Error($t0)
null28:
   $v0 = local[2]
   out[0] = $v0
   out[1] = 1
   $t0 = :Tree.SetHas_Right
   call $t0
   local[1] = $v0
   $t0 = local[2]
   if $t0 goto :null29
   $t0 = "null pointer"
   Error($t0)
null29:
   $v0 = local[2]
   out[0] = $v0
   $v0 = local[0]
   out[1] = $v0
   $t0 = :Tree.SetRight
   call $t0
   local[1] = $v0
if5_end:
if3_end:
   goto :while1_top
while1_end:
   $v0 = 1
   ret

func Tree.Delete [in 2, out 3, local 15]
   $t0 = in[0]
   local[0] = $t0
   $t0 = in[0]
   local[1] = $t0
   $t0 = 1
   local[2] = $t0
   $t0 = 0
   local[3] = $t0
   $t0 = 1
   local[4] = $t0
while2_top:
   $t0 = local[2]
   if0 $t0 goto :while2_end
   $t0 = local[0]
   if $t0 goto :null30
   $t0 = "null pointer"
   Error($t0)
null30:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[5] = $v0
   $t0 = in[1]
   $t1 = local[5]
   $t2 = LtS($t0 $t1)
   local[6] = $t2
   $t0 = local[6]
   if0 $t0 goto :if6_else
   $t0 = local[0]
   if $t0 goto :null31
   $t0 = "null pointer"
   Error($t0)
null31:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[7] = $v0
   $t0 = local[7]
   if0 $t0 goto :if7_else
   $t0 = local[0]
   local[1] = $t0
   $t0 = local[0]
   if $t0 goto :null32
   $t0 = "null pointer"
   Error($t0)
null32:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[0] = $v0
   goto :if7_end
if7_else:
   $t0 = 0
   local[2] = $t0
if7_end:
   goto :if6_end
if6_else:
   $t0 = local[5]
   $t1 = in[1]
   $t2 = LtS($t0 $t1)
   local[8] = $t2
   $t0 = local[8]
   if0 $t0 goto :if8_else
   $t0 = local[0]
   if $t0 goto :null33
   $t0 = "null pointer"
   Error($t0)
null33:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[9] = $v0
   $t0 = local[9]
   if0 $t0 goto :if9_else
   $t0 = local[0]
   local[1] = $t0
   $t0 = local[0]
   if $t0 goto :null34
   $t0 = "null pointer"
   Error($t0)
null34:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   local[0] = $v0
   goto :if9_end
if9_else:
   $t0 = 0
   local[2] = $t0
if9_end:
   goto :if8_end
if8_else:
   $t0 = local[4]
   if0 $t0 goto :if10_else
   $t0 = local[0]
   if $t0 goto :null35
   $t0 = "null pointer"
   Error($t0)
null35:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[10] = $v0
   $t0 = local[10]
   if $t0 goto :if11_else
   $t0 = local[0]
   if $t0 goto :null36
   $t0 = "null pointer"
   Error($t0)
null36:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[11] = $v0
   $t0 = local[11]
   if $t0 goto :if11_else
   $t0 = 1
   local[12] = $t0
   goto :if11_end
if11_else:
   $v0 = in[0]
   out[0] = $v0
   $v0 = local[1]
   out[1] = $v0
   $v0 = local[0]
   out[2] = $v0
   $t0 = :Tree.Remove
   call $t0
   local[12] = $v0
if11_end:
   goto :if10_end
if10_else:
   $v0 = in[0]
   out[0] = $v0
   $v0 = local[1]
   out[1] = $v0
   $v0 = local[0]
   out[2] = $v0
   $t0 = :Tree.Remove
   call $t0
   local[12] = $v0
if10_end:
   $t0 = 1
   local[3] = $t0
   $t0 = 0
   local[2] = $t0
if8_end:
if6_end:
   $t0 = 0
   local[4] = $t0
   goto :while2_top
while2_end:
   $v0 = local[3]
   ret

func Tree.Remove [in 3, out 3, local 12]
   $t0 = in[2]
   if $t0 goto :null37
   $t0 = "null pointer"
   Error($t0)
null37:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[0] = $v0
   $t0 = local[0]
   if0 $t0 goto :if12_else
   $v0 = in[0]
   out[0] = $v0
   $v0 = in[1]
   out[1] = $v0
   $v0 = in[2]
   out[2] = $v0
   $t0 = :Tree.RemoveLeft
   call $t0
   local[1] = $v0
   goto :if12_end
if12_else:
   $t0 = in[2]
   if $t0 goto :null38
   $t0 = "null pointer"
   Error($t0)
null38:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[2] = $v0
   $t0 = local[2]
   if0 $t0 goto :if13_else
   $v0 = in[0]
   out[0] = $v0
   $v0 = in[1]
   out[1] = $v0
   $v0 = in[2]
   out[2] = $v0
   $t0 = :Tree.RemoveRight
   call $t0
   local[1] = $v0
   goto :if13_end
if13_else:
   $t0 = in[2]
   if $t0 goto :null39
   $t0 = "null pointer"
   Error($t0)
null39:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[3] = $v0
   $t0 = in[1]
   if $t0 goto :null40
   $t0 = "null pointer"
   Error($t0)
null40:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[4] = $v0
   $t0 = local[4]
   if $t0 goto :null41
   $t0 = "null pointer"
   Error($t0)
null41:
   $v0 = local[4]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[5] = $v0
   $v0 = in[0]
   out[0] = $v0
   $v0 = local[3]
   out[1] = $v0
   $v0 = local[5]
   out[2] = $v0
   $t0 = :Tree.Compare
   call $t0
   local[6] = $v0
   $t0 = local[6]
   if0 $t0 goto :if14_else
   $t0 = in[1]
   if $t0 goto :null42
   $t0 = "null pointer"
   Error($t0)
null42:
   $t0 = in[0]
   $t1 = local[7]
   $t1 = [$t0+20]
   local[7] = $t1
   $v0 = in[1]
   out[0] = $v0
   $v0 = local[7]
   out[1] = $v0
   $t0 = :Tree.SetLeft
   call $t0
   local[1] = $v0
   $t0 = in[1]
   if $t0 goto :null43
   $t0 = "null pointer"
   Error($t0)
null43:
   $v0 = in[1]
   out[0] = $v0
   out[1] = 0
   $t0 = :Tree.SetHas_Left
   call $t0
   local[1] = $v0
   goto :if14_end
if14_else:
   $t0 = in[1]
   if $t0 goto :null44
   $t0 = "null pointer"
   Error($t0)
null44:
   $t0 = in[0]
   $t1 = local[8]
   $t1 = [$t0+20]
   local[8] = $t1
   $v0 = in[1]
   out[0] = $v0
   $v0 = local[8]
   out[1] = $v0
   $t0 = :Tree.SetRight
   call $t0
   local[1] = $v0
   $t0 = in[1]
   if $t0 goto :null45
   $t0 = "null pointer"
   Error($t0)
null45:
   $v0 = in[1]
   out[0] = $v0
   out[1] = 0
   $t0 = :Tree.SetHas_Right
   call $t0
   local[1] = $v0
if14_end:
if13_end:
if12_end:
   $v0 = 1
   ret

func Tree.RemoveRight [in 3, out 2, local 8]
while3_top:
   $t0 = in[2]
   if $t0 goto :null46
   $t0 = "null pointer"
   Error($t0)
null46:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[0] = $v0
   $t0 = local[0]
   if0 $t0 goto :while3_end
   $t0 = in[2]
   if $t0 goto :null47
   $t0 = "null pointer"
   Error($t0)
null47:
   $t0 = in[2]
   if $t0 goto :null48
   $t0 = "null pointer"
   Error($t0)
null48:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   local[1] = $v0
   $t0 = local[1]
   if $t0 goto :null49
   $t0 = "null pointer"
   Error($t0)
null49:
   $v0 = local[1]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[2] = $v0
   $v0 = in[2]
   out[0] = $v0
   $v0 = local[2]
   out[1] = $v0
   $t0 = :Tree.SetKey
   call $t0
   local[3] = $v0
   $t0 = in[2]
   in[1] = $t0
   $t0 = in[2]
   if $t0 goto :null50
   $t0 = "null pointer"
   Error($t0)
null50:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   in[2] = $v0
   goto :while3_top
while3_end:
   $t0 = in[1]
   if $t0 goto :null51
   $t0 = "null pointer"
   Error($t0)
null51:
   $t0 = in[0]
   $t1 = local[4]
   $t1 = [$t0+20]
   local[4] = $t1
   $v0 = in[1]
   out[0] = $v0
   $v0 = local[4]
   out[1] = $v0
   $t0 = :Tree.SetRight
   call $t0
   local[3] = $v0
   $t0 = in[1]
   if $t0 goto :null52
   $t0 = "null pointer"
   Error($t0)
null52:
   $v0 = in[1]
   out[0] = $v0
   out[1] = 0
   $t0 = :Tree.SetHas_Right
   call $t0
   local[3] = $v0
   $v0 = 1
   ret

func Tree.RemoveLeft [in 3, out 2, local 8]
while4_top:
   $t0 = in[2]
   if $t0 goto :null53
   $t0 = "null pointer"
   Error($t0)
null53:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[0] = $v0
   $t0 = local[0]
   if0 $t0 goto :while4_end
   $t0 = in[2]
   if $t0 goto :null54
   $t0 = "null pointer"
   Error($t0)
null54:
   $t0 = in[2]
   if $t0 goto :null55
   $t0 = "null pointer"
   Error($t0)
null55:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[1] = $v0
   $t0 = local[1]
   if $t0 goto :null56
   $t0 = "null pointer"
   Error($t0)
null56:
   $v0 = local[1]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[2] = $v0
   $v0 = in[2]
   out[0] = $v0
   $v0 = local[2]
   out[1] = $v0
   $t0 = :Tree.SetKey
   call $t0
   local[3] = $v0
   $t0 = in[2]
   in[1] = $t0
   $t0 = in[2]
   if $t0 goto :null57
   $t0 = "null pointer"
   Error($t0)
null57:
   $v0 = in[2]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   in[2] = $v0
   goto :while4_top
while4_end:
   $t0 = in[1]
   if $t0 goto :null58
   $t0 = "null pointer"
   Error($t0)
null58:
   $t0 = in[0]
   $t1 = local[4]
   $t1 = [$t0+20]
   local[4] = $t1
   $v0 = in[1]
   out[0] = $v0
   $v0 = local[4]
   out[1] = $v0
   $t0 = :Tree.SetLeft
   call $t0
   local[3] = $v0
   $t0 = in[1]
   if $t0 goto :null59
   $t0 = "null pointer"
   Error($t0)
null59:
   $v0 = in[1]
   out[0] = $v0
   out[1] = 0
   $t0 = :Tree.SetHas_Left
   call $t0
   local[3] = $v0
   $v0 = 1
   ret

func Tree.Search [in 2, out 1, local 10]
   $t0 = in[0]
   local[0] = $t0
   $t0 = 1
   local[1] = $t0
   $t0 = 0
   local[2] = $t0
while5_top:
   $t0 = local[1]
   if0 $t0 goto :while5_end
   $t0 = local[0]
   if $t0 goto :null60
   $t0 = "null pointer"
   Error($t0)
null60:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[3] = $v0
   $t0 = in[1]
   $t1 = local[3]
   $t2 = LtS($t0 $t1)
   local[4] = $t2
   $t0 = local[4]
   if0 $t0 goto :if15_else
   $t0 = local[0]
   if $t0 goto :null61
   $t0 = "null pointer"
   Error($t0)
null61:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[5] = $v0
   $t0 = local[5]
   if0 $t0 goto :if16_else
   $t0 = local[0]
   if $t0 goto :null62
   $t0 = "null pointer"
   Error($t0)
null62:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[0] = $v0
   goto :if16_end
if16_else:
   $t0 = 0
   local[1] = $t0
if16_end:
   goto :if15_end
if15_else:
   $t0 = local[3]
   $t1 = in[1]
   $t2 = LtS($t0 $t1)
   local[6] = $t2
   $t0 = local[6]
   if0 $t0 goto :if17_else
   $t0 = local[0]
   if $t0 goto :null63
   $t0 = "null pointer"
   Error($t0)
null63:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[7] = $v0
   $t0 = local[7]
   if0 $t0 goto :if18_else
   $t0 = local[0]
   if $t0 goto :null64
   $t0 = "null pointer"
   Error($t0)
null64:
   $v0 = local[0]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   local[0] = $v0
   goto :if18_end
if18_else:
   $t0 = 0
   local[1] = $t0
if18_end:
   goto :if17_end
if17_else:
   $t0 = 1
   local[2] = $t0
   $t0 = 0
   local[1] = $t0
if17_end:
if15_end:
   goto :while5_top
while5_end:
   $v0 = local[2]
   ret

func Tree.Print [in 1, out 2, local 3]
   $t0 = in[0]
   local[0] = $t0
   $v0 = in[0]
   out[0] = $v0
   $v0 = local[0]
   out[1] = $v0
   $t0 = :Tree.RecPrint
   call $t0
   local[1] = $v0
   $v0 = 1
   ret

func Tree.RecPrint [in 2, out 2, local 8]
   $t0 = in[1]
   if $t0 goto :null65
   $t0 = "null pointer"
   Error($t0)
null65:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[0] = $v0
   $t0 = local[0]
   if0 $t0 goto :if19_else
   $t0 = in[1]
   if $t0 goto :null66
   $t0 = "null pointer"
   Error($t0)
null66:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[1] = $v0
   $v0 = in[0]
   out[0] = $v0
   $v0 = local[1]
   out[1] = $v0
   $t0 = :Tree.RecPrint
   call $t0
   local[2] = $v0
   goto :if19_end
if19_else:
   $t0 = 1
   local[2] = $t0
if19_end:
   $t0 = in[1]
   if $t0 goto :null67
   $t0 = "null pointer"
   Error($t0)
null67:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[3] = $v0
   $t0 = local[3]
   PrintIntS($t0)
   $t0 = in[1]
   if $t0 goto :null68
   $t0 = "null pointer"
   Error($t0)
null68:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[4] = $v0
   $t0 = local[4]
   if0 $t0 goto :if20_else
   $t0 = in[1]
   if $t0 goto :null69
   $t0 = "null pointer"
   Error($t0)
null69:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   local[5] = $v0
   $v0 = in[0]
   out[0] = $v0
   $v0 = local[5]
   out[1] = $v0
   $t0 = :Tree.RecPrint
   call $t0
   local[2] = $v0
   goto :if20_end
if20_else:
   $t0 = 1
   local[2] = $t0
if20_end:
   $v0 = 1
   ret

func Tree.accept [in 2, out 2, local 4]
   $t0 = 333
   PrintIntS($t0)
   $t0 = in[1]
   if $t0 goto :null70
   $t0 = "null pointer"
   Error($t0)
null70:
   $t0 = in[1]
   $t1 = local[0]
   $t1 = [$t0+0]
   local[0] = $t1
   $t0 = local[0]
   $t1 = local[0]
   $t1 = [$t0+0]
   local[0] = $t1
   $v0 = in[1]
   out[0] = $v0
   $v0 = in[0]
   out[1] = $v0
   $t0 = local[0]
   call $t0
   local[1] = $v0
   $v0 = 0
   ret

func Visitor.visit [in 2, out 2, local 9]
   $t0 = in[1]
   if $t0 goto :null71
   $t0 = "null pointer"
   Error($t0)
null71:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[0] = $v0
   $t0 = local[0]
   if0 $t0 goto :if21_else
   $t0 = in[1]
   if $t0 goto :null72
   $t0 = "null pointer"
   Error($t0)
null72:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   local[1] = $v0
   $t0 = in[0]
   $t1 = local[1]
   [$t0+8] = $t1
   $t0 = in[0]
   $t1 = local[2]
   $t1 = [$t0+8]
   local[2] = $t1
   $t0 = local[2]
   if $t0 goto :null73
   $t0 = "null pointer"
   Error($t0)
null73:
   $v0 = local[2]
   out[0] = $v0
   $v0 = in[0]
   out[1] = $v0
   $t0 = :Tree.accept
   call $t0
   local[3] = $v0
   goto :if21_end
if21_else:
   $t0 = 0
   local[3] = $t0
if21_end:
   $t0 = in[1]
   if $t0 goto :null74
   $t0 = "null pointer"
   Error($t0)
null74:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[4] = $v0
   $t0 = local[4]
   if0 $t0 goto :if22_else
   $t0 = in[1]
   if $t0 goto :null75
   $t0 = "null pointer"
   Error($t0)
null75:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[5] = $v0
   $t0 = in[0]
   $t1 = local[5]
   [$t0+4] = $t1
   $t0 = in[0]
   $t1 = local[6]
   $t1 = [$t0+4]
   local[6] = $t1
   $t0 = local[6]
   if $t0 goto :null76
   $t0 = "null pointer"
   Error($t0)
null76:
   $v0 = local[6]
   out[0] = $v0
   $v0 = in[0]
   out[1] = $v0
   $t0 = :Tree.accept
   call $t0
   local[3] = $v0
   goto :if22_end
if22_else:
   $t0 = 0
   local[3] = $t0
if22_end:
   $v0 = 0
   ret

func MyVisitor.visit [in 2, out 2, local 10]
   $t0 = in[1]
   if $t0 goto :null77
   $t0 = "null pointer"
   Error($t0)
null77:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetHas_Right
   call $t0
   local[0] = $v0
   $t0 = local[0]
   if0 $t0 goto :if23_else
   $t0 = in[1]
   if $t0 goto :null78
   $t0 = "null pointer"
   Error($t0)
null78:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetRight
   call $t0
   local[1] = $v0
   $t0 = in[0]
   $t1 = local[1]
   [$t0+8] = $t1
   $t0 = in[0]
   $t1 = local[2]
   $t1 = [$t0+8]
   local[2] = $t1
   $t0 = local[2]
   if $t0 goto :null79
   $t0 = "null pointer"
   Error($t0)
null79:
   $v0 = local[2]
   out[0] = $v0
   $v0 = in[0]
   out[1] = $v0
   $t0 = :Tree.accept
   call $t0
   local[3] = $v0
   goto :if23_end
if23_else:
   $t0 = 0
   local[3] = $t0
if23_end:
   $t0 = in[1]
   if $t0 goto :null80
   $t0 = "null pointer"
   Error($t0)
null80:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetKey
   call $t0
   local[4] = $v0
   $t0 = local[4]
   PrintIntS($t0)
   $t0 = in[1]
   if $t0 goto :null81
   $t0 = "null pointer"
   Error($t0)
null81:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetHas_Left
   call $t0
   local[5] = $v0
   $t0 = local[5]
   if0 $t0 goto :if24_else
   $t0 = in[1]
   if $t0 goto :null82
   $t0 = "null pointer"
   Error($t0)
null82:
   $v0 = in[1]
   out[0] = $v0
   $t0 = :Tree.GetLeft
   call $t0
   local[6] = $v0
   $t0 = in[0]
   $t1 = local[6]
   [$t0+4] = $t1
   $t0 = in[0]
   $t1 = local[7]
   $t1 = [$t0+4]
   local[7] = $t1
   $t0 = local[7]
   if $t0 goto :null83
   $t0 = "null pointer"
   Error($t0)
null83:
   $v0 = local[7]
   out[0] = $v0
   $v0 = in[0]
   out[1] = $v0
   $t0 = :Tree.accept
   call $t0
   local[3] = $v0
   goto :if24_end
if24_else:
   $t0 = 0
   local[3] = $t0
if24_end:
   $v0 = 0
   ret



