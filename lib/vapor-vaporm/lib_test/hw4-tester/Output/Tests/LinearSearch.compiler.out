const vmt_LS
  :LS.Start
  :LS.Print
  :LS.Search
  :LS.Init

func Main [in 0, out 2, local 3]
   $t0 = 12
   $t1 = HeapAllocZ($t0)
   local[0] = $t1
   $t0 = local[0]
   $t1 = :vmt_LS
   [$t0+0] = $t1
   $t0 = local[0]
   if $t0 goto :null1
   $t0 = "null pointer"
   Error($t0)
null1:
   $t0 = local[0]
   $t1 = local[1]
   $t1 = [$t0+0]
   local[1] = $t1
   $t0 = local[1]
   $t1 = local[1]
   $t1 = [$t0+0]
   local[1] = $t1
   $v0 = local[0]
   out[0] = $v0
   out[1] = 10
   $t0 = local[1]
   call $t0
   local[2] = $v0
   $t0 = local[2]
   PrintIntS($t0)
   ret

func LS.Start [in 2, out 2, local 14]
   $t0 = in[0]
   $t1 = local[0]
   $t1 = [$t0+0]
   local[0] = $t1
   $t0 = local[0]
   $t1 = local[0]
   $t1 = [$t0+12]
   local[0] = $t1
   $v0 = in[0]
   out[0] = $v0
   $v0 = in[1]
   out[1] = $v0
   $t0 = local[0]
   call $t0
   local[1] = $v0
   $t0 = in[0]
   $t1 = local[2]
   $t1 = [$t0+0]
   local[2] = $t1
   $t0 = local[2]
   $t1 = local[2]
   $t1 = [$t0+4]
   local[2] = $t1
   $v0 = in[0]
   out[0] = $v0
   $t0 = local[2]
   call $t0
   local[3] = $v0
   $t0 = 9999
   PrintIntS($t0)
   $t0 = in[0]
   $t1 = local[4]
   $t1 = [$t0+0]
   local[4] = $t1
   $t0 = local[4]
   $t1 = local[4]
   $t1 = [$t0+8]
   local[4] = $t1
   $v0 = in[0]
   out[0] = $v0
   out[1] = 8
   $t0 = local[4]
   call $t0
   local[5] = $v0
   $t0 = local[5]
   PrintIntS($t0)
   $t0 = in[0]
   $t1 = local[6]
   $t1 = [$t0+0]
   local[6] = $t1
   $t0 = local[6]
   $t1 = local[6]
   $t1 = [$t0+8]
   local[6] = $t1
   $v0 = in[0]
   out[0] = $v0
   out[1] = 12
   $t0 = local[6]
   call $t0
   local[7] = $v0
   $t0 = local[7]
   PrintIntS($t0)
   $t0 = in[0]
   $t1 = local[8]
   $t1 = [$t0+0]
   local[8] = $t1
   $t0 = local[8]
   $t1 = local[8]
   $t1 = [$t0+8]
   local[8] = $t1
   $v0 = in[0]
   out[0] = $v0
   out[1] = 17
   $t0 = local[8]
   call $t0
   local[9] = $v0
   $t0 = local[9]
   PrintIntS($t0)
   $t0 = in[0]
   $t1 = local[10]
   $t1 = [$t0+0]
   local[10] = $t1
   $t0 = local[10]
   $t1 = local[10]
   $t1 = [$t0+8]
   local[10] = $t1
   $v0 = in[0]
   out[0] = $v0
   out[1] = 50
   $t0 = local[10]
   call $t0
   local[11] = $v0
   $t0 = local[11]
   PrintIntS($t0)
   $v0 = 55
   ret

func LS.Print [in 1, out 0, local 7]
   $t0 = 1
   local[0] = $t0
while1_top:
   $t0 = in[0]
   $t1 = local[1]
   $t1 = [$t0+8]
   local[1] = $t1
   $t0 = local[0]
   $t1 = local[1]
   $t2 = LtS($t0 $t1)
   local[2] = $t2
   $t0 = local[2]
   if0 $t0 goto :while1_end
   $t0 = in[0]
   $t1 = local[3]
   $t1 = [$t0+4]
   local[3] = $t1
   $t0 = local[3]
   if $t0 goto :null2
   $t0 = "null pointer"
   Error($t0)
null2:
   $t0 = local[3]
   $t1 = local[4]
   $t1 = [$t0+0]
   local[4] = $t1
   $t0 = local[0]
   $t1 = local[4]
   $t2 = Lt($t0 $t1)
   local[4] = $t2
   $t0 = local[4]
   if $t0 goto :bounds1
   $t0 = "array index out of bounds"
   Error($t0)
bounds1:
   $t0 = local[0]
   $t1 = 4
   $t2 = MulS($t0 $t1)
   local[4] = $t2
   $t0 = local[4]
   $t1 = local[3]
   $t2 = Add($t0 $t1)
   local[4] = $t2
   $t0 = local[4]
   $t1 = local[5]
   $t1 = [$t0+4]
   local[5] = $t1
   $t0 = local[5]
   PrintIntS($t0)
   $t0 = local[0]
   $t1 = 1
   $t2 = Add($t0 $t1)
   local[0] = $t2
   goto :while1_top
while1_end:
   $v0 = 0
   ret

func LS.Search [in 2, out 0, local 15]
   $t0 = 1
   local[0] = $t0
   $t0 = 0
   local[1] = $t0
   $t0 = 0
   local[2] = $t0
while2_top:
   $t0 = in[0]
   $t1 = local[3]
   $t1 = [$t0+8]
   local[3] = $t1
   $t0 = local[0]
   $t1 = local[3]
   $t2 = LtS($t0 $t1)
   local[4] = $t2
   $t0 = local[4]
   if0 $t0 goto :while2_end
   $t0 = in[0]
   $t1 = local[5]
   $t1 = [$t0+4]
   local[5] = $t1
   $t0 = local[5]
   if $t0 goto :null3
   $t0 = "null pointer"
   Error($t0)
null3:
   $t0 = local[5]
   $t1 = local[6]
   $t1 = [$t0+0]
   local[6] = $t1
   $t0 = local[0]
   $t1 = local[6]
   $t2 = Lt($t0 $t1)
   local[6] = $t2
   $t0 = local[6]
   if $t0 goto :bounds2
   $t0 = "array index out of bounds"
   Error($t0)
bounds2:
   $t0 = local[0]
   $t1 = 4
   $t2 = MulS($t0 $t1)
   local[6] = $t2
   $t0 = local[6]
   $t1 = local[5]
   $t2 = Add($t0 $t1)
   local[6] = $t2
   $t0 = local[6]
   $t1 = local[7]
   $t1 = [$t0+4]
   local[7] = $t1
   $t0 = in[1]
   $t1 = 1
   $t2 = Add($t0 $t1)
   local[8] = $t2
   $t0 = local[7]
   $t1 = in[1]
   $t2 = LtS($t0 $t1)
   local[9] = $t2
   $t0 = local[9]
   if0 $t0 goto :if1_else
   $t0 = 0
   local[10] = $t0
   goto :if1_end
if1_else:
   $t0 = local[7]
   $t1 = local[8]
   $t2 = LtS($t0 $t1)
   local[11] = $t2
   $t0 = 1
   $t1 = local[11]
   $t2 = Sub($t0 $t1)
   local[12] = $t2
   $t0 = local[12]
   if0 $t0 goto :if2_else
   $t0 = 0
   local[10] = $t0
   goto :if2_end
if2_else:
   $t0 = 1
   local[1] = $t0
   $t0 = 1
   local[2] = $t0
   $t0 = in[0]
   $t1 = local[0]
   $t1 = [$t0+8]
   local[0] = $t1
if2_end:
if1_end:
   $t0 = local[0]
   $t1 = 1
   $t2 = Add($t0 $t1)
   local[0] = $t2
   goto :while2_top
while2_end:
   $v0 = local[2]
   ret

func LS.Init [in 2, out 1, local 13]
   $t0 = in[0]
   $t1 = in[1]
   [$t0+8] = $t1
   $v0 = in[1]
   out[0] = $v0
   $t0 = :AllocArray
   call $t0
   local[0] = $v0
   $t0 = in[0]
   $t1 = local[0]
   [$t0+4] = $t1
   $t0 = 1
   local[1] = $t0
   $t0 = in[0]
   $t1 = local[2]
   $t1 = [$t0+8]
   local[2] = $t1
   $t0 = local[2]
   $t1 = 1
   $t2 = Add($t0 $t1)
   local[3] = $t2
while3_top:
   $t0 = in[0]
   $t1 = local[4]
   $t1 = [$t0+8]
   local[4] = $t1
   $t0 = local[1]
   $t1 = local[4]
   $t2 = LtS($t0 $t1)
   local[5] = $t2
   $t0 = local[5]
   if0 $t0 goto :while3_end
   $t0 = 2
   $t1 = local[1]
   $t2 = MulS($t0 $t1)
   local[6] = $t2
   $t0 = local[3]
   $t1 = 3
   $t2 = Sub($t0 $t1)
   local[7] = $t2
   $t0 = in[0]
   $t1 = local[8]
   $t1 = [$t0+4]
   local[8] = $t1
   $t0 = local[8]
   if $t0 goto :null4
   $t0 = "null pointer"
   Error($t0)
null4:
   $t0 = local[8]
   $t1 = local[9]
   $t1 = [$t0+0]
   local[9] = $t1
   $t0 = local[1]
   $t1 = local[9]
   $t2 = Lt($t0 $t1)
   local[9] = $t2
   $t0 = local[9]
   if $t0 goto :bounds3
   $t0 = "array index out of bounds"
   Error($t0)
bounds3:
   $t0 = local[1]
   $t1 = 4
   $t2 = MulS($t0 $t1)
   local[9] = $t2
   $t0 = local[9]
   $t1 = local[8]
   $t2 = Add($t0 $t1)
   local[9] = $t2
   $t0 = local[6]
   $t1 = local[7]
   $t2 = Add($t0 $t1)
   local[10] = $t2
   $t0 = local[9]
   $t1 = local[10]
   [$t0+4] = $t1
   $t0 = local[1]
   $t1 = 1
   $t2 = Add($t0 $t1)
   local[1] = $t2
   $t0 = local[3]
   $t1 = 1
   $t2 = Sub($t0 $t1)
   local[3] = $t2
   goto :while3_top
while3_end:
   $v0 = 0
   ret

func AllocArray [in 1, out 0, local 3]
   $t0 = in[0]
   $t1 = 4
   $t2 = MulS($t0 $t1)
   local[0] = $t2
   $t0 = local[0]
   $t1 = 4
   $t2 = Add($t0 $t1)
   local[0] = $t2
   $t0 = local[0]
   $t1 = HeapAllocZ($t0)
   local[1] = $t1
   $t0 = local[1]
   $t1 = in[0]
   [$t0+0] = $t1
   $v0 = local[1]
   ret



